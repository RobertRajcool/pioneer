<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appDevDebugProjectContainerUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevDebugProjectContainerUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes;

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
        if (null === self::$declaredRoutes) {
            self::$declaredRoutes = array(
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_purge' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:purgeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/purge',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_info' => array (  0 =>   array (    0 => 'about',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:infoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'about',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler/info',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_twig_error_test' => array (  0 =>   array (    0 => 'code',    1 => '_format',  ),  1 =>   array (    '_controller' => 'twig.controller.preview_error:previewErrorPageAction',    '_format' => 'html',  ),  2 =>   array (    'code' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => '[^/]++',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'code',    ),    2 =>     array (      0 => 'text',      1 => '/_error',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addFiles' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\DataImportController::getElementByKpiIdAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/addfilesaction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listFiles' => array (  0 =>   array (  ),  1 =>   array (    'reuseMode' => '',    '_controller' => 'RankingBundle\\Controller\\DataImportController::listfilesAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/listoffiles',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ranking_dataverfication_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\DataVerficationController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/dataverification/indexaction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addDataRanking' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\DataVerficationController::rankinDataverificationAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/dataverification/rankingIndexaction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'shipWiseRankingData' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\DataVerficationController::gotoshipWiseDataRankingAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/dataverification/gotoshipWiseRankingData',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'shipWiseScorecardData' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\DataVerficationController::gotoshipWiseDataScorecardAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/dataverification/gotoshipWiseScorecardData',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'saveRankingData' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\DataVerficationController::saveRankingDataAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/dataverification/saveRankingData',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'adddataScorecard' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\DataVerficationController::gotoScorecardMonthDataAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/dataverification/gotoscorecardmonthdata',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'saveScorecardData' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\DataVerficationController::addkpivaluesAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/dataverification/savescorecarddata',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ranking_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ranking_rankingelementdetails_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/indexaction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectrankingelements' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::selectrankingelementsAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/selectrankingelements',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'elementdetailsbykpiid' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::getElementByKpiIdAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/elementdetailsbykpiid',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectkpiandsymbol' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::selectkpiandsymbolIndicationAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/selectkpiandsymbol',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addSymbol' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::addSymbolAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/addsymbol',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addElements' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::addElementAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/addelements',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updateElements' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::updateElementAction',  ),  2 =>   array (    '_method' => 'PUT',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/updateElement',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'checkelementweightage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::checkelementweightageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/ranking_element_checkweightage',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'checkrankingElementName' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::checkrankingElementNameAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/checkrankingelementName',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'elmentwithzeroweightage' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::selectallelementwithzeroweighageAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/elmentwithzeroweightage',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectrankingelementsbyId' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingElementDetailsController::selectkpiByIdAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingelement/selectelementbyId',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ranking_rankingkpidetails_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/indexaction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addrankingKpi' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::addkpiAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/addkpi',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updaterankingkpi' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::updatekpiAction',  ),  2 =>   array (    '_method' => 'PUT',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/updaterankingkpi',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectrankingkpi' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::selectallkpiAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/selectallkpi',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectrankingkpibyfilter' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::selectallusigfilterkpiAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/selectallkpibyfilter',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectkpibyId' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::selectkpiByIdAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/selectkpibyId',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'checkkpiweightage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::checkrankingkpiweightageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/ranking_kpi_checkweightage',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'checkkpiname' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingKpiDetailsController::checkrankingkpinameAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/rankingkpi/checkrankingkpiname',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'add_rules' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingRulesDetailsController::addRulesAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/ranking_rules/add_rules',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'edit_rules' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingRulesDetailsController::editRulesAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/ranking_rules/edit_rules',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'get_rules_details' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingRulesDetailsController::getRulesDetailsAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/ranking_rules/get_rules_details',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'get_rules' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'RankingBundle\\Controller\\RankingRulesDetailsController::getRulesAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/ranking/ranking_rules/get_rules',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'vessel_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\DefaultController::indexAction',    '_format' => 'json',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'send_mail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::SendMailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/sendmail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'view_mails' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::ViewmailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/view_list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'group_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::groupnameAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/grouplist',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'list_mail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::countListAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/show_list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'create_group' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::CreategroupAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/createGroup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'group_edit' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::groupEditAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Groupedit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update_group' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::updateuseremailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/update_email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'groupDelete_mail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::removeEmailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/groupremove_email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Show_mails' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::mailingListAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/mail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'remove_mail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::removeAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/remove_email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'trash_mails' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::trashmailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/trashmail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'trashmail_count' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::trashcountAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/trascount',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'removetrash_emails' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::removetrashmailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/remove_trashemail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'search_mail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::searchsentmailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/sentmail_search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'search_trashmail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::searchtrashmailAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/trashmail_search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'backup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::dbBackupAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/overallBackup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Show_backup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::backupReportShowAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Backupshow',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'download_backup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\MailingController::DownloadAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/download',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'get_vessel' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::AllshipsAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/allships',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'get_report' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::shipReportAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/allreport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'incident_report' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::getIncidentAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/incidentreport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'get_incidentreport' => array (  0 =>   array (  ),  1 =>   array (    'pdfmode' => ' ',    '_controller' => 'VesselBundle\\Controller\\ReportController::IncidentReportAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/incidentwisereport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'severity_report' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::severtyReportAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/severitywisereport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'openclosed_pdfreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::openclosePdfAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/pdfopenclosed',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'pdf_report' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::PdfAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/offhire_pdf',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'get_incidentwisereport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::incidentwiseReportAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/typeofincidentreport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'openClosed_report' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::opencloseReportAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/pdfoffhireReport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'incidentwise_pdfreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::pdfincidentwiseAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/pdfincidentwise',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'vesselwise_pdfreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::pdfvesselwiseAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/pdfvesselreport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'severity_pdfreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::pdfseveritywiseAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/severitywisepdf_report',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'send_report' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::sendReportoffhireAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/sendreport_offhire',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'send_openclosedreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::sendreportopenClosePdfAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/sendreportopenclosed',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'send_incidentwisereport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::sendReportincidentwiseAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/sendincident_report',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'send_Severityreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ReportController::sendReportseverityAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/sendSeverityReport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'CreateVessel' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::createShipAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Create_Vessel',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Show_Ships' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::Show_AllshipsAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Show_allships',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Showship' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::ShowshipsAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Show_ships',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'shipTypes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::ship_typesAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Ship_types',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_countries' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::countriesAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Show_countries',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'Vessel_types' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::VesselTypeAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Show_vessel_types',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ship_status' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::ship_statusAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Show_shipStatus',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update_Vessel' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\ShipDetailsController::ship_updateAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/update_ship',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'scorecard_reportGenerate' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\scorecardReportController::ReportGenerateAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/report_generate',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ranking_reportGenerate' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'VesselBundle\\Controller\\scorecardReportController::RankingGenerateAction',    '_format' => 'json',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/vesselbunlde/secure/Rankingreport_generate',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'company_createuser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\CompanyUsersController::postUserAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/companyusers/createcompany',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'companyusers' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\CompanyUsersController::getcompanyuserAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/companyusers/get_companyuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'findUserbyId' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\CompanyUsersController::findUserbyIdAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/companyusers/finduserbyId',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'changeUsrstatus' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\CompanyUsersController::changeUserStatusAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/companyusers/changeuserstatus',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updateuser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\CompanyUsersController::updateAction',  ),  2 =>   array (    '_method' => 'PUT',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/companyusers/updateuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dashboard_welcome' => array (  0 =>   array (  ),  1 =>   array (    'reuseMode' => '',    '_controller' => 'DashboardBundle\\Controller\\DashboardController::welcomePageAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/dashboard/welcome',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dashboard_welcome_month' => array (  0 =>   array (  ),  1 =>   array (    'reuseMode' => '',    '_controller' => 'DashboardBundle\\Controller\\DashboardController::monthwiseAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/dashboard/welcomedata_month',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'offhiredayscost' => array (  0 =>   array (  ),  1 =>   array (    'reuseMode' => '',    '_controller' => 'DashboardBundle\\Controller\\DashboardController::offhiredaysandCostAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/dashboard/offhiredayscost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'typeofcausereport' => array (  0 =>   array (  ),  1 =>   array (    'reuseMode' => '',    '_controller' => 'DashboardBundle\\Controller\\DashboardController::typeofcausereportAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/dashboard/typeofcausereport',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dashboard_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'incident_listofVessels' => array (  0 =>   array (  ),  1 =>   array (    'reuseMode' => '',    '_controller' => 'DashboardBundle\\Controller\\IncidentController::findallshipsAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/findVessels',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'incident_listtypeofcaursefactorincident' => array (  0 =>   array (  ),  1 =>   array (    'mode' => '',    '_controller' => 'DashboardBundle\\Controller\\IncidentController::findalltypeofcausefactorincidentAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/findallincidenttime',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'createnewIcident' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::createnewIcidentAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/createnewincident',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addincidentDetail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::incidentDetailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/incidentDetail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addCostDetail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addCostDetailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addCostDetails',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addOperatorWetherDetail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addOperatorWetherDetailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addOperatorWetherDetail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addincident_stat_Details' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addstatdataDetailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addincident_stat_Details',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addTypeofCause' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addTypeofCauseAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addTypeofCause',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addoperationattheTimeofIncident' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::operationattheTimeofIncidentAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addoperationattheTimeofIncident',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'goToIncidentFirstInfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::goToIncidentFirstInfoAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/goToIncidentFirstInfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'gotocreateincidentDetail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::gotocreateincidentDetailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/gotocreateincidentDetail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'gotoCreateCostDetail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::gotoCreateCostDetailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/gotoCreateCostDetail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'gotocreateOperatorWhetherDetails' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::gotocreateOperatorWhetherDetailsAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/gotocreateOperatorWhetherDetails',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addfactortoIncidentmodel' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::factortoIncidentmodelAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addfactortoIncidentmodel',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addTypeofIncident' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addTypeofIncidentAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addTypeofIncident',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addhazardtype' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addhazardtypeAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addhazardtype',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addTypeofInjury' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addTypeofInjuryAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addTypeofInjury',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addTypeofAccident' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addTypeofAccidentAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addTypeofAccident',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addPlaceofAccident' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addPlaceofAccidentAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addPlaceofAccident',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addBodyAreasAffected' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addBodyAreasAffectedAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addBodyAreasAffected',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addshipOperation' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addshipOperationAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addshipOperation',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addseaPollutionCategory' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addseaPollutionCategoryAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addseaPollutionCategory',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addContainerPollutionCategory' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::addContainerPollutionCategoryAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/addContainerPollutionCategory',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getalldropdownstatdata' => array (  0 =>   array (  ),  1 =>   array (    'requestMode' => '',    '_controller' => 'DashboardBundle\\Controller\\IncidentController::getalldropdownstatdataAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/getalldropdownstatdata',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'gotocreateincidentstat' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::gotocreateincidentstatDetailsAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/gotocreateincidentstat',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'findalltypecause' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::findallTypeofCauseAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/findalltypecause',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'changetypeofcuaseStatus' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::changeTypeofCuaseStuatusAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/changetypeofcuaseStatus',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'changeIncidentStatus' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::changeIncidentStuatusAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/changeIncidentStatus',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'findAllincidents' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::findallIncidentsAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/findincidents',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'findallincidentwithoutpaging' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\IncidentController::findallIncidentswithoutPaginAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/incident/findallincidentwithoutpaging',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'indexaction' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\KpiDashboardController::indexAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/kpidashboard/indexaction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'kpidashboard' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\KpiDashboardController::findallIncidentswithoutPaginAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/kpidashboard/kpidashboarddata',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listallkpiforship_ranking' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DashboardBundle\\Controller\\KpiDashboardController::findInduivalshipwiseDataAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/kpidashboard/listallkpiforship_ranking',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'homepage1' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'homepage2' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\DefaultController::indexAction1',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/test',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'user_welcome' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\UserController::WelcomeAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/authencation/welcome',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'userLogout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\UserController::logoutAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/authencation/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'createuser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\UserController::postUserAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/authencation/createcompany',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'requestpassword' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\UserController::requestNewPaaswordAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/authencation/forgot_password',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'log_details' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\UserController::logdetailsAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/authencation/log_details',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'userAuthencation' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\UserController::loginAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/authencation/check_user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'companyuserlist' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'UserBundle\\Controller\\UserController::getAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/authencation/get_companyuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_js_routing_js' => array (  0 =>   array (    0 => '_format',  ),  1 =>   array (    '_controller' => 'fos_js_routing.controller:indexAction',    '_format' => 'js',  ),  2 =>   array (    '_format' => 'js|json',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'js|json',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/js/routing',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/login_check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_profile_show' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/profile/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_profile_edit' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/profile/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_register' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::registerAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/register/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/register/check-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_confirm' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/userbundle/register/confirm',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_confirmed' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmedAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/register/confirmed',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_request' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/resetting/request',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_send_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/resetting/send-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/resetting/check-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_reset' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/userbundle/resetting/reset',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_change_password' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/userbundle/profile/change-password',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );
        }
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
